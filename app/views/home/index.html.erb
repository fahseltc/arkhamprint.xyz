<div class="container my-5">
  <div class="row justify-content-center">
    <div class="col-md-8 col-lg-8">
      <div class="card shadow-sm">
        <div class="card-body">
          <h2 class="card-title text-center mb-4">ArkhamPrint.XYZ</h2>
          <p class="card-text text-center mb-3">
            ArkhamPrint.XYZ helps players print proxy decks at home and uses <%= link_to "ArkhamDB", "https://arkhamdb.com", target: :_blank %> for card images.
          </p>

          <!-- Tabs -->
          <ul class="nav nav-tabs mb-4" id="pdfTab" role="tablist">
            <li class="nav-item" role="presentation">
              <button class="nav-link active" id="from-deck-tab" data-bs-toggle="tab" data-bs-target="#from-deck" type="button" role="tab">
                From Deck URL
              </button>
            </li>
            <li class="nav-item" role="presentation">
              <button class="nav-link disabled" id="from-cardlist-tab" data-bs-toggle="tooltip" data-bs-placement="top" title="Coming soon!" data-bs-target="#from-cardlist" type="button" role="tab">
                From Card List
              </button>
            </li>
          </ul>

          <!-- Tab content -->
          <div class="tab-content" id="pdfTabContent">
            <!-- From Deck URL -->
            <div class="tab-pane fade show active" id="from-deck" role="tabpanel">
              <form id="pdfForm">
                <div class="mb-3 mt-5">
                  <label for="deck_url" class="form-label">ArkhamDB Deck URL or Deck ID</label>
                  <input type="text" class="form-control" placeholder="https://arkhamdb.com/decklist/view/48985 or 48985">
                </div>
                <div class="form-check mb-4">
                  <input class="form-check-input" type="checkbox" value="1" id="include_investigator" checked>
                  <label class="form-check-label" for="include_investigator">
                    Include investigator card
                  </label>
                </div>
                <button type="submit" class="btn btn-primary w-100" id="generatePdfBtn">
                  Get PDF
                </button>
              </form>
            </div>

            <!-- From Card List -->
            <div class="tab-pane fade" id="from-cardlist" role="tabpanel">
              <form id="pdfFormCardList">
                <div class="mb-3 mt-5">
                  <label for="card_list" class="form-label">List of ArkhamDB CardID's (comma or space separated)</label>
                  <input type="text" class="form-control" id="card_list" placeholder="10019, 60111, 01000 06111">
                </div>
                <button type="submit" class="btn btn-primary w-100" id="generateCardListBtn">
                  Get PDF
                </button>
              </form>
            </div>
          </div>

        </div>
      </div>
    </div>
  </div>
</div>

<%= render "partials/modals" %>

<script>
  // **Everything from your original pasted JS remains untouched**

  const deckModalEl = document.getElementById("byDeckUrlModal");
  let modalInstance;

  function extractDeckId(input) {
    input = input.trim();
    const match = input.match(/\/view\/(\d+)/);
    if (match) {
      return match[1];
    }
    if (/^\d+$/.test(input)) {
      return input;
    }
    return null;
  }

  function submitPdfJob() {
    const deckId = extractDeckId($('#deck_url').val());
    if (!deckId) {
      alert("Invalid deck URL or ID");
      return;
    }
    const includeInvestigator = $('#include_investigator').is(':checked');
    const modalContent = $("#byDeckUrlModalContent");

    modalInstance = new bootstrap.Modal(deckModalEl, {
      backdrop: "static",
      keyboard: false
    });
    modalInstance.show();

    modalContent.html(`
      <div class="modal-body">
        <div class="d-flex justify-content-center align-items-center mb-2">
          <div class="spinner-border" role="status" style="width: 3rem; height: 3rem;"></div>
          <span class="ms-3" id="pdfJobStatusText">Submitting job...</span>
        </div>
        <div class="progress">
          <div id="pdfJobProgressBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%">0%</div>
        </div>
      </div>
    `);

    fetch("/pdf_jobs", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          deck_id: deckId,
          include_investigator: includeInvestigator
        })
      })
      .then(res => res.json())
      .then(data => {
        gtag("event", "deck_job_created", {
          "deck_id": deckId,
          "pdf_job_id": data.pdf_job_id
        });
        pollPdfJob(data.pdf_job_id)
      })
      .catch(err => {
        modalInstance._config.backdrop = true;
        modalInstance._config.keyboard = true;
        modalContent.html(`<div class="modal-body text-center text-danger">Error: ${err.message}</div>`);
        console.error(err);
      });
  }

  function pollPdfJob(pdfJobId) {
    const interval = 2000;
    const startTime = Date.now()
    const modalContent = $("#byDeckUrlModalContent");
    const statusText = $("#pdfJobStatusText");
    const progressBar = $("#pdfJobProgressBar");

    function checkStatus() {
      fetch(`/pdf_jobs/${pdfJobId}`, {
          headers: {
            "Accept": "application/json"
          }
        })
        .then(res => res.json())
        .then(data => {
          if (data.status === "completed") {
            const elapsedSec = Math.floor((Date.now() - startTime) / 1000);
            gtag("event", "deck_pdf_completed", {
              "pdf_job_id": pdfJobId,
              "deck_id": $('#deck_url').val(),
              "duration_seconds": elapsedSec
            });
            let downloadUrl = data.file_url.startsWith("http") ? data.file_url : `/pdf_jobs/${pdfJobId}/download`;
            window.open(downloadUrl, "_blank");
            modalContent.html(`<div class="modal-body text-center">Download ready!</div>`);
            modalInstance._config.backdrop = true;
            modalInstance._config.keyboard = true;
            setTimeout(() => modalInstance.hide(), 2000);
          } else if (data.status === "failed") {
            modalInstance._config.backdrop = true;
            modalInstance._config.keyboard = true;
            modalContent.html(`<div class="modal-body text-center text-danger">Failed: ${data.error_message}</div>`);
            gtag("event", "deck_pdf_failed", {
              "pdf_job_id": pdfJobId,
              "deck_id": $('#deck_url').val(),
              "error_message": data.error_message
            });
          } else {
            let progress = 0;
            if (data.current_progress && data.max_progress) {
              progress = Math.floor((data.current_progress / data.max_progress) * 100);
            }
            progressBar.css("width", progress + "%");
            progressBar.text(progress + "%");
            statusText.text(data.current_progress && data.max_progress ?
              `Printing card ${data.current_progress}/${data.max_progress}...` :
              "Processing...");
            setTimeout(checkStatus, interval);
          }
        })
        .catch(err => {
          modalInstance._config.backdrop = true;
          modalInstance._config.keyboard = true;
          modalContent.html(`<div class="modal-body text-center text-danger">Error: ${err.message}</div>`);
          console.error(err);
        });
    }
    checkStatus();
  }

  // **Trigger original form submission**
  $('#pdfForm').on('submit', function(e) {
    e.preventDefault();
    submitPdfJob();
  });

  // From Card List
  $('#pdfFormCardList').on('submit', function(e) {
    e.preventDefault();
    const cardListRaw = $('#card_list').val();
    const cardListArray = parseCardList(cardListRaw);
    console.log(cardListNumbers)

    // // Uses a separate JSON endpoint, modal logic can be reused if needed
    // fetch("/pdf_jobs_card_list", {
    //     method: "POST",
    //     headers: {
    //       "Content-Type": "application/json"
    //     },
    //     body: JSON.stringify({
    //       card_list: cardList
    //     })
    //   })
    //   .then(res => res.json())
    //   .then(data => {
    //     gtag("event", "card_list_job_created", {
    //       "card_list": cardList,
    //       "pdf_job_id": data.pdf_job_id
    //     });
    //     pollPdfJob(data.pdf_job_id); // reuse same modal/polling if desired
    //   })
    //   .catch(err => {
    //     const modalContent = $("#byDeckUrlModalContent");
    //     modalContent.html(`<div class="modal-body text-center text-danger">Error: ${err.message}</div>`);
    //     console.error(err);
    //   });
  });

  function parseCardList(input) {
    if (!input) return [];

    // Split by comma, whitespace, or line breaks, then filter out empty strings
    return input
      .split(/[\s,]+/) // splits on spaces, commas, or newlines
      .map(s => s.trim()) // remove extra whitespace
      .filter(Boolean) // remove empty strings
      .map(Number) // convert to numbers
      .filter(n => !isNaN(n)); // remove invalid numbers
  }
</script>