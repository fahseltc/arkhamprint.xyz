<div class="container my-5">
  <div class="row justify-content-center">
    <div class="col-md-8 col-lg-8">
      <div class="card shadow-sm">
        <div class="card-body">
          <h2 class="card-title text-center mb-4">ArkhamPrint.XYZ</h2>
          <p class="card-text text-center mb-3">
            ArkhamPrint.XYZ helps players print proxy decks at home.
          </p>
          <p class="card-text text-center mb-12">
            It uses <%= link_to "ArkhamDB", "https://arkhamdb.com", target: :_blank %> for card images.
            Enter a deck URL or deck ID to generate a PDF.
          </p>

          <div class="mb-3 mt-5">
            <label for="deck_url" class="form-label">ArkhamDB Deck URL or Deck ID</label>
            <input type="text" class="form-control" id="deck_url" placeholder="https://arkhamdb.com/decklist/view/48985 or 48985">
          </div>
          <button type="button" class="btn btn-primary w-100" id="generatePdfBtn">
            Get PDF
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<%= render "partials/modals" %>


<script>
  const deckModalEl = document.getElementById("byDeckUrlModal");
  let modalInstance;

  function extractDeckId(input) {
    input = input.trim();
    const match = input.match(/\/view\/(\d+)/);
    if (match) {
      return match[1]; // extracted deck ID from URL
    }

    // Otherwise, allow only numeric input
    if (/^\d+$/.test(input)) {
      return input; // plain number
    }
    return null
  }

  function submitPdfJob() {
    const deckId = extractDeckId($('#deck_url').val());
    if (!deckId) {
      alert("Invalid deck URL or ID");
      return;
    }

    const modalContent = $("#byDeckUrlModalContent");

    // Make modal static while job is running
    modalInstance = new bootstrap.Modal(deckModalEl, {
      backdrop: "static",
      keyboard: false
    });
    modalInstance.show();

    modalContent.html(`
      <div class="modal-body">
        <div class="d-flex justify-content-center align-items-center mb-2">
          <div class="spinner-border" role="status" style="width: 3rem; height: 3rem;"></div>
          <span class="ms-3" id="pdfJobStatusText">Submitting job...</span>
        </div>
        <div class="progress">
          <div id="pdfJobProgressBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%">0%</div>
        </div>
      </div>
    `);

    // POST to pdf_jobs#create
    fetch("/pdf_jobs", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          deck_id: deckId
        })
      })
      .then(res => res.json())
      .then(data => {
        gtag("event", "deck_job_created", {
          "deck_id": deckId,
          "pdf_job_id": data.pdf_job_id
        });
        pollPdfJob(data.pdf_job_id)
      })
      .catch(err => {
        modalInstance._config.backdrop = true;
        modalInstance._config.keyboard = true;

        modalContent.html(`<div class="modal-body text-center text-danger">Error: ${err.message}</div>`);
        console.error(err);
      });
  }

  function pollPdfJob(pdfJobId) {
    const interval = 2000;
    const startTime = Date.now()
    const modalContent = $("#byDeckUrlModalContent");
    const statusText = $("#pdfJobStatusText");
    const progressBar = $("#pdfJobProgressBar");

    function checkStatus() {
      fetch(`/pdf_jobs/${pdfJobId}`, {
          headers: {
            "Accept": "application/json"
          }
        })
        .then(res => res.json())
        .then(data => {
          if (data.status === "completed") {
            const elapsedSec = Math.floor((Date.now() - startTime) / 1000);
            gtag("event", "deck_pdf_completed", {
              "pdf_job_id": pdfJobId,
              "deck_id": $('#deck_url').val(), // optional
              "duration_seconds": elapsedSec
            });
            let downloadUrl = data.file_url.startsWith("http") ?
              data.file_url :
              `/pdf_jobs/${pdfJobId}/download`;

            window.open(downloadUrl, "_blank");

            modalContent.html(`<div class="modal-body text-center">Download ready!</div>`);

            // Restore modal behavior and auto-close after short delay
            modalInstance._config.backdrop = true;
            modalInstance._config.keyboard = true;
            setTimeout(() => modalInstance.hide(), 2000);

          } else if (data.status === "failed") {
            // Restore modal behavior if job fails
            modalInstance._config.backdrop = true;
            modalInstance._config.keyboard = true;

            modalContent.html(`<div class="modal-body text-center text-danger">Failed: ${data.error_message}</div>`);
            gtag("event", "deck_pdf_failed", {
              "pdf_job_id": pdfJobId,
              "deck_id": $('#deck_url').val(),
              "error_message": data.error_message
            });
          } else {
            // Update progress bar
            let progress = 0;
            if (data.current_progress && data.max_progress) {
              progress = Math.floor((data.current_progress / data.max_progress) * 100);
            }
            progressBar.css("width", progress + "%");
            progressBar.text(progress + "%");

            statusText.text(data.current_progress && data.max_progress ?
              `Printing card ${data.current_progress}/${data.max_progress}...` :
              "Processing...");

            setTimeout(checkStatus, interval);
          }
        })
        .catch(err => {
          modalInstance._config.backdrop = true;
          modalInstance._config.keyboard = true;
          modalContent.html(`<div class="modal-body text-center text-danger">Error: ${err.message}</div>`);
          console.error(err);
        });
    }

    checkStatus();
  }

  // Trigger job submission on button click
  $('#generatePdfBtn').on('click', submitPdfJob);
</script>